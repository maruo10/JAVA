package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.slf4j.Logger;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  // Logger loggerA = org.slf4j.LoggerFactory.getLogger("com.hoge");  // rootロガーのみ継承されることになるため、ファイルBには出力されず、標準出力とファイルAにのみ出力されます。
  // Logger loggerB = org.slf4j.LoggerFactory.getLogger(getClass().getPackage().getName());  // "com.example"ロガーを継承した"com.example.logback.demo.SampleController"ロガーが生成され、ログがファイルBにも出力されます。

  Log log = LogFactory.getLog(MainController.class);


  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name
      , @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    // loggerA.info("これはrootロガーのみ継承されているためFILE_Aのみに出力されます。");
    // loggerB.info("これはcom.exampleロガーを継承しているのでFILE_AとFILE_Bに出力されます。");

    log.info("this is add!");

    User n = new User();
    n.setName(name);
    n.setEmail(email);
    userRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    log.info("this is all! hello world!!!");
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
}
